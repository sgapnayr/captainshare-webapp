// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String   @unique
  name          String
  role          String   @default("user") // "captain", "owner", "admin" (optional for now)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Boat {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  ownerId       String   @db.ObjectId // Relation to User
  name          String
  capacity      Int
  location      String   // e.g., Lake Austin
  hourlyRate    Float
  certificationsRequired String[] // List of certs
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Trip {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  boatId        String   @db.ObjectId // Relation to Boat
  captainId     String   @db.ObjectId // Relation to User (captain)
  ownerId       String   @db.ObjectId // Relation to User (owner)
  date          DateTime
  duration      Float    // In hours
  totalCost     Float
  status        String   @default("pending") // "pending", "approved", "completed", "canceled"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Review {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  tripId        String   @db.ObjectId // Relation to Trip
  reviewerId    String   @db.ObjectId // Relation to User
  revieweeId    String   @db.ObjectId // Relation to User (captain/owner)
  rating        Int      // 1-5
  comment       String
  createdAt     DateTime @default(now())
}



